package vn.fs.api;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import vn.fs.entity.Cart;
import vn.fs.entity.CartDetail;
import vn.fs.entity.Order;
import vn.fs.entity.OrderDetail;
import vn.fs.entity.Product;
import vn.fs.repository.CartDetailRepository;
import vn.fs.repository.CartRepository;
import vn.fs.repository.OrderDetailRepository;
import vn.fs.repository.OrderRepository;
import vn.fs.repository.ProductRepository;
import vn.fs.repository.UserRepository;
import vn.fs.utils.SendMailUtil;
import vn.fs.vnpay.Config;
import vn.fs.vnpay.VNPayRequest;
import vn.fs.vnpay.VNPayResponse;

@CrossOrigin("*")
@RestController
@RequestMapping("api/orders")
public class OrderApi {

	@Autowired
	OrderRepository orderRepository;

	@Autowired
	OrderDetailRepository orderDetailRepository;

	@Autowired
	UserRepository userRepository;

	@Autowired
	CartRepository cartRepository;

	@Autowired
	CartDetailRepository cartDetailRepository;

	@Autowired
	ProductRepository productRepository;

	@Autowired
	SendMailUtil senMail;

	@GetMapping
	public ResponseEntity<List<Order>> findAll() {
		return ResponseEntity.ok(orderRepository.findAllByOrderByOrdersIdDesc());
	}

	@GetMapping("{id}")
	public ResponseEntity<Order> getById(@PathVariable("id") Long id) {
		if (!orderRepository.existsById(id)) {
			return ResponseEntity.notFound().build();
		}
		return ResponseEntity.ok(orderRepository.findById(id).get());
	}

	@GetMapping("/user/{email}")
	public ResponseEntity<List<Order>> getByUser(@PathVariable("email") String email) {
		if (!userRepository.existsByEmail(email)) {
			return ResponseEntity.notFound().build();
		}
		return ResponseEntity
				.ok(orderRepository.findByUserOrderByOrdersIdDesc(userRepository.findByEmail(email).get()));
	}

	@PostMapping("/{email}")
	public ResponseEntity<Order> checkout(@PathVariable("email") String email, @RequestBody Cart cart) {
		if (!userRepository.existsByEmail(email)) {
			return ResponseEntity.notFound().build();
		}
		if (!cartRepository.existsById(cart.getCartId())) {
			return ResponseEntity.notFound().build();
		}
		List<CartDetail> items = cartDetailRepository.findByCart(cart);
		Double amount = 0.0;
		for (CartDetail item : items) {
	        if (item.getProduct().getQuantity() == 0) {
	            return ResponseEntity.notFound().build();
	        }
	        amount += item.getPrice();
	    }
		Order order = orderRepository.save(new Order(0L, new Date(), amount, cart.getAddress(), cart.getPhone(), 0,
				userRepository.findByEmail(email).get()));
		for (CartDetail i : items) {
			OrderDetail orderDetail = new OrderDetail(0L, i.getQuantity(), i.getPrice(), i.getProduct(), order);
			orderDetailRepository.save(orderDetail);
		}
//		cartDetailRepository.deleteByCart(cart);
		for (CartDetail i : items) {
			cartDetailRepository.delete(i);
		}
		senMail.sendMailOrder(order);
		updateProduct(order);
		return ResponseEntity.ok(order);
	}
	@PostMapping("/paypal/{email}")
	public ResponseEntity<Order> checkoutPaypal(@PathVariable("email") String email, @RequestBody Cart cart) {
		if (!userRepository.existsByEmail(email)) {
			return ResponseEntity.notFound().build();
		}
		if (!cartRepository.existsById(cart.getCartId())) {
			return ResponseEntity.notFound().build();
		}
		List<CartDetail> items = cartDetailRepository.findByCart(cart);
		Double amount = 0.0;
		for (CartDetail item : items) {
	        if (item.getProduct().getQuantity() == 0) {
	            return ResponseEntity.notFound().build();
	        }
	        amount += item.getPrice();
	    }
		Order order = orderRepository.save(new Order(0L, new Date(), amount, cart.getAddress(), cart.getPhone(),4,
				userRepository.findByEmail(email).get()));
		for (CartDetail i : items) {
			OrderDetail orderDetail = new OrderDetail(0L, i.getQuantity(), i.getPrice(), i.getProduct(), order);
			orderDetailRepository.save(orderDetail);
		}
//		cartDetailRepository.deleteByCart(cart);
		for (CartDetail i : items) {
			cartDetailRepository.delete(i);
		}
		senMail.sendMailOrderPay(order);
		updateProduct(order);
		return ResponseEntity.ok(order);
	}
	
	@PostMapping("/vnpay/{email}")
	public ResponseEntity<String> checkoutVNPay(@PathVariable("email") String email, @RequestBody Cart cart, HttpServletRequest request) {
	    // Validate email and cart existence
	    if (!userRepository.existsByEmail(email) || !cartRepository.existsById(cart.getCartId())) {
	        return ResponseEntity.notFound().build();
	    }

	    // Retrieve items from cart
	    List<CartDetail> items = cartDetailRepository.findByCart(cart);

	    // Calculate total amount of the order
	    Double amount = items.stream().mapToDouble(CartDetail::getPrice).sum();

	    // Create new Order object and save to database
	    Order order = orderRepository.save(new Order(0L, new Date(), amount, cart.getAddress(), cart.getPhone(), 0,
	            userRepository.findByEmail(email).get()));
	    
	    // Save order details
	    for (CartDetail item : items) {
	        OrderDetail orderDetail = new OrderDetail(0L, item.getQuantity(), item.getPrice(), item.getProduct(), order);
	        orderDetailRepository.save(orderDetail);
	    }

	    // Delete cart items after successful order placement
	    for (CartDetail item : items) {
	        cartDetailRepository.delete(item);
	    }

	    // Prepare parameters for VNPAY payment
	    Map<String, String> vnpParams = new HashMap<>();
	    vnpParams.put("vnp_TmnCode", Config.vnp_TmnCode);
	    vnpParams.put("vnp_Amount", String.valueOf(amount * 100)); // amount in VND, so multiply by 100
	    vnpParams.put("vnp_Command", "pay");
	    vnpParams.put("vnp_CreateDate", new SimpleDateFormat("yyyyMMddHHmmss").format(new Date()));
	    vnpParams.put("vnp_CurrCode", "VND");
	    vnpParams.put("vnp_IpAddr", Config.getIpAddress(request));
	    vnpParams.put("vnp_Locale", "vn");
	    vnpParams.put("vnp_OrderInfo", "Thanh toan don hang");
	    vnpParams.put("vnp_OrderType", "billpayment");
	    vnpParams.put("vnp_ReturnUrl", Config.vnp_ReturnUrl);
	    vnpParams.put("vnp_TxnRef", String.valueOf(order.getOrdersId()));

	    // Generate secure hash for validation
	    vnpParams.put("vnp_SecureHashType", "SHA256");
	    vnpParams.put("vnp_SecureHash", Config.hashAllFields(vnpParams));

	    // Build URL for redirection to VNPAY
	    StringBuilder vnpUrl = new StringBuilder(Config.vnp_PayUrl);
	    vnpUrl.append("?vnp_Version=2.0.0");
	    vnpParams.forEach((key, value) -> {
	        try {
	            vnpUrl.append("&").append(key).append("=").append(URLEncoder.encode(value, "UTF-8"));
	        } catch (UnsupportedEncodingException e) {
	            e.printStackTrace();
	        }
	    });

	    // Redirect user to VNPAY payment page
	    return ResponseEntity.ok(vnpUrl.toString());
	}


	@GetMapping("cancel/{orderId}")
	public ResponseEntity<Void> cancel(@PathVariable("orderId") Long id) {
		if (!orderRepository.existsById(id)) {
			return ResponseEntity.notFound().build();
		}
		Order order = orderRepository.findById(id).get();
		order.setStatus(3);
		orderRepository.save(order);
		senMail.sendMailOrderCancel(order);
		restoreProductQuantity(order);
		return ResponseEntity.ok().build();
	}

	@GetMapping("deliver/{orderId}")
	public ResponseEntity<Void> deliver(@PathVariable("orderId") Long id) {
		if (!orderRepository.existsById(id)) {
			return ResponseEntity.notFound().build();
		}
		Order order = orderRepository.findById(id).get();
		order.setStatus(1);
		orderRepository.save(order);
		senMail.sendMailOrderDeliver(order);
		return ResponseEntity.ok().build();
	}

	@GetMapping("success/{orderId}")
	public ResponseEntity<Void> success(@PathVariable("orderId") Long id) {
		if (!orderRepository.existsById(id)) {
			return ResponseEntity.notFound().build();
		}
		Order order = orderRepository.findById(id).get();
		order.setStatus(2);
		orderRepository.save(order);
		senMail.sendMailOrderSuccess(order);
//		updateProduct(order);
		return ResponseEntity.ok().build();
	}

	public void updateProduct(Order order) {
		List<OrderDetail> listOrderDetail = orderDetailRepository.findByOrder(order);
		for (OrderDetail orderDetail : listOrderDetail) {
			Product product = productRepository.findById(orderDetail.getProduct().getProductId()).get();
			if (product != null) {
				product.setQuantity(product.getQuantity() - orderDetail.getQuantity());
				product.setSold(product.getSold() + orderDetail.getQuantity());
				productRepository.save(product);
			}
		}
	}
	public void restoreProductQuantity(Order order) {
	    List<OrderDetail> listOrderDetail = orderDetailRepository.findByOrder(order);
	    for (OrderDetail orderDetail : listOrderDetail) {
	        Product product = productRepository.findById(orderDetail.getProduct().getProductId()).get();
	        if (product != null) {
	            product.setQuantity(product.getQuantity() + orderDetail.getQuantity());
	            product.setSold(product.getSold() - orderDetail.getQuantity());
	            productRepository.save(product);
	        }
	    }
	}
	
	 @PostMapping("/update-after-payment/{orderId}")
	    public ResponseEntity<Order> updateOrderAfterPayment(@PathVariable Long orderId) {
	        Order order = orderRepository.findById(orderId).orElse(null);
	        if (order == null) {
	            return ResponseEntity.notFound().build();
	        }

	        // Update order status and amount
	        order.setStatus(1); // Assuming 1 is the status for 'paid'
	        order.setAmount(0.0);
	        
	        Order updatedOrder = orderRepository.save(order);
	        return ResponseEntity.ok(updatedOrder);
	    }
}
