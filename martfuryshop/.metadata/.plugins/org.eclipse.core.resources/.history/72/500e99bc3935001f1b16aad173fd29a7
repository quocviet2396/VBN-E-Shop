package vn.fs.api;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import vn.fs.entity.Cart;
import vn.fs.entity.CartDetail;
import vn.fs.entity.Order;
import vn.fs.entity.OrderDetail;
import vn.fs.entity.Product;
import vn.fs.repository.CartDetailRepository;
import vn.fs.repository.CartRepository;
import vn.fs.repository.OrderDetailRepository;
import vn.fs.repository.OrderRepository;
import vn.fs.repository.ProductRepository;
import vn.fs.repository.UserRepository;
import vn.fs.utils.SendMailUtil;
import vn.fs.vnpay.Config;
import vn.fs.vnpay.VNPayRequest;
import vn.fs.vnpay.VNPayResponse;

@CrossOrigin("*")
@RestController
@RequestMapping("api/orders")
public class OrderApi {

	@Autowired
	OrderRepository orderRepository;

	@Autowired
	OrderDetailRepository orderDetailRepository;

	@Autowired
	UserRepository userRepository;

	@Autowired
	CartRepository cartRepository;

	@Autowired
	CartDetailRepository cartDetailRepository;

	@Autowired
	ProductRepository productRepository;

	@Autowired
	SendMailUtil senMail;

	@GetMapping
	public ResponseEntity<List<Order>> findAll() {
		return ResponseEntity.ok(orderRepository.findAllByOrderByOrdersIdDesc());
	}

	@GetMapping("{id}")
	public ResponseEntity<Order> getById(@PathVariable("id") Long id) {
		if (!orderRepository.existsById(id)) {
			return ResponseEntity.notFound().build();
		}
		return ResponseEntity.ok(orderRepository.findById(id).get());
	}

	@GetMapping("/user/{email}")
	public ResponseEntity<List<Order>> getByUser(@PathVariable("email") String email) {
		if (!userRepository.existsByEmail(email)) {
			return ResponseEntity.notFound().build();
		}
		return ResponseEntity
				.ok(orderRepository.findByUserOrderByOrdersIdDesc(userRepository.findByEmail(email).get()));
	}

	@PostMapping("/{email}")
	public ResponseEntity<Order> checkout(@PathVariable("email") String email, @RequestBody Cart cart) {
		if (!userRepository.existsByEmail(email)) {
			return ResponseEntity.notFound().build();
		}
		if (!cartRepository.existsById(cart.getCartId())) {
			return ResponseEntity.notFound().build();
		}
		List<CartDetail> items = cartDetailRepository.findByCart(cart);
		Double amount = 0.0;
		for (CartDetail item : items) {
	        if (item.getProduct().getQuantity() == 0) {
	            return ResponseEntity.notFound().build();
	        }
	        amount += item.getPrice();
	    }
		Order order = orderRepository.save(new Order(0L, new Date(), amount, cart.getAddress(), cart.getPhone(), 0,
				userRepository.findByEmail(email).get()));
		for (CartDetail i : items) {
			OrderDetail orderDetail = new OrderDetail(0L, i.getQuantity(), i.getPrice(), i.getProduct(), order);
			orderDetailRepository.save(orderDetail);
		}
//		cartDetailRepository.deleteByCart(cart);
		for (CartDetail i : items) {
			cartDetailRepository.delete(i);
		}
		senMail.sendMailOrder(order);
		updateProduct(order);
		return ResponseEntity.ok(order);
	}
	@PostMapping("/paypal/{email}")
	public ResponseEntity<Order> checkoutPaypal(@PathVariable("email") String email, @RequestBody Cart cart) {
		if (!userRepository.existsByEmail(email)) {
			return ResponseEntity.notFound().build();
		}
		if (!cartRepository.existsById(cart.getCartId())) {
			return ResponseEntity.notFound().build();
		}
		List<CartDetail> items = cartDetailRepository.findByCart(cart);
		Double amount = 0.0;
		for (CartDetail item : items) {
	        if (item.getProduct().getQuantity() == 0) {
	            return ResponseEntity.notFound().build();
	        }
	        amount += item.getPrice();
	    }
		Order order = orderRepository.save(new Order(0L, new Date(), amount, cart.getAddress(), cart.getPhone(),4,
				userRepository.findByEmail(email).get()));
		for (CartDetail i : items) {
			OrderDetail orderDetail = new OrderDetail(0L, i.getQuantity(), i.getPrice(), i.getProduct(), order);
			orderDetailRepository.save(orderDetail);
		}
//		cartDetailRepository.deleteByCart(cart);
		for (CartDetail i : items) {
			cartDetailRepository.delete(i);
		}
		senMail.sendMailOrderPay(order);
		updateProduct(order);
		return ResponseEntity.ok(order);
	}
	
	 @PostMapping("/vnpay/{email}")
	    public ResponseEntity<VNPayResponse> checkoutVNPay(@PathVariable("email") String email, @RequestBody Cart cart) {

		 	String defaultIpAddress = "172.168.98.79";
	        // Check if the email exists in the system
	        if (!userRepository.existsByEmail(email)) {
	            return ResponseEntity.notFound().build();
	        }

	        // Check if the cart exists
	        if (!cartRepository.existsById(cart.getCartId())) {
	            return ResponseEntity.notFound().build();
	        }

	        // Get items from the cart
	        List<CartDetail> items = cartDetailRepository.findByCart(cart);

	        // Calculate the total amount
	        Double amount = items.stream().mapToDouble(CartDetail::getPrice).sum();

	        // Generate VNPay transaction data
	        VNPayRequest vnpRequest = new VNPayRequest();
	        vnpRequest.setVnp_Version("2.1.0");
	        vnpRequest.setVnp_Command("pay");
	        vnpRequest.setVnp_TmnCode(Config.vnp_TmnCode);
	        vnpRequest.setVnp_Amount((long) (amount * 100)); // Amount in VND (multiply by 100)
	        vnpRequest.setVnp_CurrCode("VND");
	        vnpRequest.setVnp_IpAddr(defaultIpAddress); // Get IP address from request
	        vnpRequest.setVnp_OrderInfo("Payment for order"); // Order information
	        vnpRequest.setVnp_OrderType("billpayment");
	        vnpRequest.setVnp_ReturnUrl(Config.vnp_ReturnUrl); // Return URL after payment

	        // Set other optional parameters if needed

	        // Build query string
	        String queryString = vnpRequest.createRequestUrl();

	        // Construct response object
	        VNPayResponse response = new VNPayResponse();
	        response.setPaymentUrl(Config.vnp_PayUrl + "?" + queryString);

	        // Save order details before redirecting to VNPay

	        Order order = orderRepository.save(new Order(0L, new Date(), amount, cart.getAddress(), cart.getPhone(),4,
					userRepository.findByEmail(email).get()));
			for (CartDetail i : items) {
				OrderDetail orderDetail = new OrderDetail(0L, i.getQuantity(), i.getPrice(), i.getProduct(), order);
				orderDetailRepository.save(orderDetail);
			}
//			cartDetailRepository.deleteByCart(cart);
			for (CartDetail i : items) {
				cartDetailRepository.delete(i);
			}
			senMail.sendMailOrderPay(order);
			updateProduct(order);
	        return ResponseEntity.ok(response);
	    }

	    // Endpoint to handle VNPay return URL
	    @GetMapping("/vnpay-return")
	    public ResponseEntity<String> vnpayReturn(@RequestParam("vnp_ResponseCode") String responseCode,
	                                              @RequestParam("vnp_TxnRef") String txnRef) {

	        // Verify VNPay callback here
	        // Handle VNPay response and update order status accordingly
	        // Example verification (you need to implement this based on VNPay documentation)

	        if ("00".equals(responseCode)) {
	            // Payment successful, update order status
	            Long orderId = Long.parseLong(txnRef); // Assuming VNPay returns order ID in txnRef
	            Order order = orderRepository.findById(orderId).orElse(null);
	            if (order != null) {
	                order.setStatus(2); // Mark order as paid
	                orderRepository.save(order);
	                return ResponseEntity.ok("Payment successful. Thank you!");
	            }
	        }

	        // Payment failed or other status, handle accordingly
	        return ResponseEntity.ok("Payment failed. Please try again.");
	    }


	@GetMapping("cancel/{orderId}")
	public ResponseEntity<Void> cancel(@PathVariable("orderId") Long id) {
		if (!orderRepository.existsById(id)) {
			return ResponseEntity.notFound().build();
		}
		Order order = orderRepository.findById(id).get();
		order.setStatus(3);
		orderRepository.save(order);
		senMail.sendMailOrderCancel(order);
		restoreProductQuantity(order);
		return ResponseEntity.ok().build();
	}

	@GetMapping("deliver/{orderId}")
	public ResponseEntity<Void> deliver(@PathVariable("orderId") Long id) {
		if (!orderRepository.existsById(id)) {
			return ResponseEntity.notFound().build();
		}
		Order order = orderRepository.findById(id).get();
		order.setStatus(1);
		orderRepository.save(order);
		senMail.sendMailOrderDeliver(order);
		return ResponseEntity.ok().build();
	}

	@GetMapping("success/{orderId}")
	public ResponseEntity<Void> success(@PathVariable("orderId") Long id) {
		if (!orderRepository.existsById(id)) {
			return ResponseEntity.notFound().build();
		}
		Order order = orderRepository.findById(id).get();
		order.setStatus(2);
		orderRepository.save(order);
		senMail.sendMailOrderSuccess(order);
//		updateProduct(order);
		return ResponseEntity.ok().build();
	}

	public void updateProduct(Order order) {
		List<OrderDetail> listOrderDetail = orderDetailRepository.findByOrder(order);
		for (OrderDetail orderDetail : listOrderDetail) {
			Product product = productRepository.findById(orderDetail.getProduct().getProductId()).get();
			if (product != null) {
				product.setQuantity(product.getQuantity() - orderDetail.getQuantity());
				product.setSold(product.getSold() + orderDetail.getQuantity());
				productRepository.save(product);
			}
		}
	}
	public void restoreProductQuantity(Order order) {
	    List<OrderDetail> listOrderDetail = orderDetailRepository.findByOrder(order);
	    for (OrderDetail orderDetail : listOrderDetail) {
	        Product product = productRepository.findById(orderDetail.getProduct().getProductId()).get();
	        if (product != null) {
	            product.setQuantity(product.getQuantity() + orderDetail.getQuantity());
	            product.setSold(product.getSold() - orderDetail.getQuantity());
	            productRepository.save(product);
	        }
	    }
	}
	
	 @PostMapping("/update-after-payment/{orderId}")
	    public ResponseEntity<Order> updateOrderAfterPayment(@PathVariable Long orderId) {
	        Order order = orderRepository.findById(orderId).orElse(null);
	        if (order == null) {
	            return ResponseEntity.notFound().build();
	        }

	        // Update order status and amount
	        order.setStatus(1); // Assuming 1 is the status for 'paid'
	        order.setAmount(0.0);
	        
	        Order updatedOrder = orderRepository.save(order);
	        return ResponseEntity.ok(updatedOrder);
	    }
}
